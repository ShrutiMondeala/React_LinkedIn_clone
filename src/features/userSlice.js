import {createSlice } from '@reduxjs/toolkit';


export const userSlice = createSlice({
  name: 'user',
  initialState : {
      user:null
  },
 
  reducers: {
    loginuser: (state,action) => {
      //action will get data in payload
      state.user = action.payload;
    },
    logoutuser: (state) => {
      state.user=null;
    },
  }
});

export const { loginuser, logoutuser} = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state) => state.user.user;

export default userSlice.reducer;




// here is the slice of the user component taht will be given by redux to manage rhe 
//state globaly of the required variable. 
//Redux is a library of js. and here reducer is there where we defone actions that work with login and logout and there is selecetor also.
// We have initial state of the user and here the reducer is pye function which have action, that will set unset the states, and with the help of selector
// Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
//we use the state

// Use the PayloadAction type to declare the contents of `action.payload`
// incrementByAmount: (state, action) => {
//   state.value += action.payload;
// },
// },
// // The `extraReducers` field lets the slice handle actions defined elsewhere,
// // including actions generated by createAsyncThunk or in other slices.
// extraReducers: (builder) => {
// builder
//   .addCase(incrementAsync.pending, (state) => {
//     state.status = 'loading';
//   })
//   .addCase(incrementAsync.fulfilled, (state, action) => {
//     state.status = 'idle';
//     state.value += action.payload;
//   });
// },